from commands import COMMAND_TEST
from aiogram import Dispatcher
from aiogram.types import Message, CallbackQuery
from inline_keyboard import welcome_test_markup, bool_test_markup, theory_test_markup
from base_messages import IDLE_MESSAGE, TEST_MESSAGE
from aiogram.dispatcher.filters import Text
from handlers.test_brother import register_bool_test_handler
from handlers.test_theory import register_theory_handlers


async def welcome_test(message: Message):
    await message.answer(
        text=TEST_MESSAGE,
        reply_markup=welcome_test_markup,
        parse_mode='Markdown'
    )


async def handle_test(callback: CallbackQuery):
    answer = callback.data.split('_')[1]
    if answer == 'end':
        await callback.message.edit_text(text=IDLE_MESSAGE)
    elif answer == 'back':
        await callback.message.edit_text(
            text=TEST_MESSAGE,
            reply_markup=welcome_test_markup,
            parse_mode='Markdown'
        )
    elif answer == 'boolean':
        await init_bool_test(callback)
    elif answer == 'theory':
        await init_theory_test(callback)


async def init_bool_test(callback: CallbackQuery):
    await callback.message.edit_text(
        text='–°—É—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞ - –Ω–∞–π—Ç–∏ –ø—Ä–∏–º–µ—Ä, –≥–¥–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ _–ë—Ä–∞—Ç_.\n'
             '–£—á—Ç–∏, —á—Ç–æ —Å—Ä–µ–¥–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –º–æ–∂–µ—Ç –∏ –Ω–µ –±—ã—Ç—å –Ω—É–∂–Ω–æ–≥–æ üòâ',
        parse_mode='Markdown',
        reply_markup=bool_test_markup
    )


async def init_theory_test(callback: CallbackQuery):
    await callback.message.edit_text(
        text='–î–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –≤–∞—à–∏—Ö —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞—á–Ω–∏–π –ø–æ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–æ–º—É –º–∞—Ç–µ—Ä–∏–∞–ª—É.',
        parse_mode='Markdown',
        reply_markup=theory_test_markup
    )


def register_test_handlers(dp: Dispatcher):
    dp.register_message_handler(welcome_test, commands=COMMAND_TEST)
    dp.register_callback_query_handler(handle_test, Text(startswith='test'))
    register_bool_test_handler(dp)
    register_theory_handlers(dp)
